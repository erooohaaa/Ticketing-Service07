package services;

import dao.EventDAO;
import models.Event;
import validation.ValidationRule;
import validation.rules.EventNameValidation;
import validation.rules.EventPriceValidation;
import validation.rules.TicketCountValidation;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏, —Ç–µ–ø–µ—Ä—å —Å —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
public class EventService {
    private final EventDAO eventDAO;

    public EventService() {
        this.eventDAO = new EventDAO();
    }

    // üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ —Ç–∏–ø—É
    private final List<ValidationRule<String>> stringValidations = Arrays.asList(
            new EventNameValidation()  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    );

    private final List<ValidationRule<Double>> doubleValidations = Arrays.asList(
            new EventPriceValidation()  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è
    );

    private final List<ValidationRule<Integer>> intValidations = Arrays.asList(
            new TicketCountValidation()  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
    );

    /**
     * üîπ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    public boolean addEvent(String name, String location, String description, String category, double price, int tickets, Date date) {
        for (ValidationRule<String> rule : stringValidations) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (!rule.validate(name)) {
                System.out.println("Validation Error: " + rule.getErrorMessage());
                return false;
            }
        }

        for (ValidationRule<Double> rule : doubleValidations) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
            if (!rule.validate(price)) {
                System.out.println("Validation Error: " + rule.getErrorMessage());
                return false;
            }
        }

        for (ValidationRule<Integer> rule : intValidations) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
            if (!rule.validate(tickets)) {
                System.out.println("Validation Error: " + rule.getErrorMessage());
                return false;
            }
        }

        return eventDAO.createEvent(name, location, description, category, price, tickets, date);
    }

    /**
     * üîπ –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
     */
    public boolean editEvent(int id, String name, String location, String description, String category, double price, int tickets, Date date) {
        for (ValidationRule<String> rule : stringValidations) {
            if (!rule.validate(name)) {
                System.out.println("Validation Error: " + rule.getErrorMessage());
                return false;
            }
        }

        for (ValidationRule<Double> rule : doubleValidations) {
            if (!rule.validate(price)) {
                System.out.println("Validation Error: " + rule.getErrorMessage());
                return false;
            }
        }

        for (ValidationRule<Integer> rule : intValidations) {
            if (!rule.validate(tickets)) {
                System.out.println("Validation Error: " + rule.getErrorMessage());
                return false;
            }
        }

        return eventDAO.updateEvent(id, name, location, description, category, price, tickets, date);
    }

    /**
     * –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    public boolean removeEvent(int eventId) {
        return eventDAO.deleteEvent(eventId);
    }

    /**
     * –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
     */
    public List<Event> listEvents() {
        return eventDAO.getAllEvents();
    }

    /**
     * –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
     */
    public Event getEventDetails(int eventId) {
        return eventDAO.getFullEventDetails(eventId);
    }
}